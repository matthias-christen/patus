//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.07.09 at 04:09:57 PM CEST 
//


package ch.unibas.cs.hpwc.patus.arch;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the ch.unibas.cs.hpwc.patus.arch package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ch.unibas.cs.hpwc.patus.arch
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Parallelism.Level.Barrier }
     * 
     */
    public TypeArchitectureType.Parallelism.Level.Barrier createTypeArchitectureTypeParallelismLevelBarrier() {
        return new TypeArchitectureType.Parallelism.Level.Barrier();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Includes }
     * 
     */
    public TypeArchitectureType.Includes createTypeArchitectureTypeIncludes() {
        return new TypeArchitectureType.Includes();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Includes.Include }
     * 
     */
    public TypeArchitectureType.Includes.Include createTypeArchitectureTypeIncludesInclude() {
        return new TypeArchitectureType.Includes.Include();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Assembly.RegisterClasses }
     * 
     */
    public TypeArchitectureType.Assembly.RegisterClasses createTypeArchitectureTypeAssemblyRegisterClasses() {
        return new TypeArchitectureType.Assembly.RegisterClasses();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Intrinsics }
     * 
     */
    public TypeArchitectureType.Intrinsics createTypeArchitectureTypeIntrinsics() {
        return new TypeArchitectureType.Intrinsics();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Datatypes.Datatype }
     * 
     */
    public TypeArchitectureType.Datatypes.Datatype createTypeArchitectureTypeDatatypesDatatype() {
        return new TypeArchitectureType.Datatypes.Datatype();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Declspecs.Declspec }
     * 
     */
    public TypeArchitectureType.Declspecs.Declspec createTypeArchitectureTypeDeclspecsDeclspec() {
        return new TypeArchitectureType.Declspecs.Declspec();
    }

    /**
     * Create an instance of {@link TypeArchitectureType }
     * 
     */
    public TypeArchitectureType createTypeArchitectureType() {
        return new TypeArchitectureType();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Build }
     * 
     */
    public TypeArchitectureType.Build createTypeArchitectureTypeBuild() {
        return new TypeArchitectureType.Build();
    }

    /**
     * Create an instance of {@link ArchitectureTypes }
     * 
     */
    public ArchitectureTypes createArchitectureTypes() {
        return new ArchitectureTypes();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Datatypes }
     * 
     */
    public TypeArchitectureType.Datatypes createTypeArchitectureTypeDatatypes() {
        return new TypeArchitectureType.Datatypes();
    }

    /**
     * Create an instance of {@link TypeExecUnitType }
     * 
     */
    public TypeExecUnitType createTypeExecUnitType() {
        return new TypeExecUnitType();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Assembly }
     * 
     */
    public TypeArchitectureType.Assembly createTypeArchitectureTypeAssembly() {
        return new TypeArchitectureType.Assembly();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Assembly.ExecUnitTypes }
     * 
     */
    public TypeArchitectureType.Assembly.ExecUnitTypes createTypeArchitectureTypeAssemblyExecUnitTypes() {
        return new TypeArchitectureType.Assembly.ExecUnitTypes();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Parallelism.Level }
     * 
     */
    public TypeArchitectureType.Parallelism.Level createTypeArchitectureTypeParallelismLevel() {
        return new TypeArchitectureType.Parallelism.Level();
    }

    /**
     * Create an instance of {@link TypeRegister }
     * 
     */
    public TypeRegister createTypeRegister() {
        return new TypeRegister();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Assembly.Registers }
     * 
     */
    public TypeArchitectureType.Assembly.Registers createTypeArchitectureTypeAssemblyRegisters() {
        return new TypeArchitectureType.Assembly.Registers();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Declspecs }
     * 
     */
    public TypeArchitectureType.Declspecs createTypeArchitectureTypeDeclspecs() {
        return new TypeArchitectureType.Declspecs();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Codegenerator }
     * 
     */
    public TypeArchitectureType.Codegenerator createTypeArchitectureTypeCodegenerator() {
        return new TypeArchitectureType.Codegenerator();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Intrinsics.Intrinsic }
     * 
     */
    public TypeArchitectureType.Intrinsics.Intrinsic createTypeArchitectureTypeIntrinsicsIntrinsic() {
        return new TypeArchitectureType.Intrinsics.Intrinsic();
    }

    /**
     * Create an instance of {@link TypeRegisterClass }
     * 
     */
    public TypeRegisterClass createTypeRegisterClass() {
        return new TypeRegisterClass();
    }

    /**
     * Create an instance of {@link TypeArchitectureType.Parallelism }
     * 
     */
    public TypeArchitectureType.Parallelism createTypeArchitectureTypeParallelism() {
        return new TypeArchitectureType.Parallelism();
    }

}
