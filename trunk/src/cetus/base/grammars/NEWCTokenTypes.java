// $ANTLR 2.7.7 (20100309) jdk1.5.0_22: "NewCParser.g" -> "NewCParser.java"$

package cetus.base.grammars;

public interface NEWCTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int PREPROC_DIRECTIVE = 4;
	int LITERAL_typedef = 5;
	int SEMI = 6;
	int VARARGS = 7;
	int LCURLY = 8;
	int LITERAL_asm = 9;
	int LITERAL_volatile = 10;
	int RCURLY = 11;
	int LITERAL_struct = 12;
	int LITERAL_union = 13;
	int LITERAL_enum = 14;
	int LITERAL_auto = 15;
	int LITERAL_register = 16;
	int LITERAL_extern = 17;
	int LITERAL_static = 18;
	int LITERAL_inline = 19;
	int LITERAL_const = 20;
	int LITERAL_void = 21;
	int LITERAL_char = 22;
	int LITERAL_short = 23;
	int LITERAL_int = 24;
	int LITERAL_long = 25;
	int LITERAL_float = 26;
	int LITERAL_double = 27;
	int LITERAL_signed = 28;
	int LITERAL_unsigned = 29;
	int LITERAL__Bool = 30;
	int LITERAL__Complex = 31;
	int LITERAL__Imaginary = 32;
	int LITERAL_typeof = 33;
	int LPAREN = 34;
	int RPAREN = 35;
	int LITERAL___complex = 36;
	int ID = 37;
	int COMMA = 38;
	int COLON = 39;
	int ASSIGN = 40;
	int LITERAL___attribute = 41;
	int LITERAL___asm = 42;
	int STAR = 43;
	int LBRACKET = 44;
	int RBRACKET = 45;
	int DOT = 46;
	int LITERAL___label__ = 47;
	int LITERAL_while = 48;
	int LITERAL_do = 49;
	int LITERAL_for = 50;
	int LITERAL_goto = 51;
	int LITERAL_continue = 52;
	int LITERAL_break = 53;
	int LITERAL_return = 54;
	int LITERAL_case = 55;
	int LITERAL_default = 56;
	int LITERAL_if = 57;
	int LITERAL_else = 58;
	int LITERAL_switch = 59;
	int DIV_ASSIGN = 60;
	int PLUS_ASSIGN = 61;
	int MINUS_ASSIGN = 62;
	int STAR_ASSIGN = 63;
	int MOD_ASSIGN = 64;
	int RSHIFT_ASSIGN = 65;
	int LSHIFT_ASSIGN = 66;
	int BAND_ASSIGN = 67;
	int BOR_ASSIGN = 68;
	int BXOR_ASSIGN = 69;
	int LOR = 70;
	int LAND = 71;
	int BOR = 72;
	int BXOR = 73;
	int BAND = 74;
	int EQUAL = 75;
	int NOT_EQUAL = 76;
	int LT = 77;
	int LTE = 78;
	int GT = 79;
	int GTE = 80;
	int LSHIFT = 81;
	int RSHIFT = 82;
	int PLUS = 83;
	int MINUS = 84;
	int DIV = 85;
	int MOD = 86;
	int PTR = 87;
	int INC = 88;
	int DEC = 89;
	int QUESTION = 90;
	int LITERAL_sizeof = 91;
	int LITERAL___alignof__ = 92;
	int LITERAL___builtin_va_arg = 93;
	int LITERAL___builtin_offsetof = 94;
	int BNOT = 95;
	int LNOT = 96;
	int LITERAL___real = 97;
	int LITERAL___imag = 98;
	int Number = 99;
	int CharLiteral = 100;
	int StringLiteral = 101;
	int IntOctalConst = 102;
	int LongOctalConst = 103;
	int UnsignedOctalConst = 104;
	int IntIntConst = 105;
	int LongIntConst = 106;
	int UnsignedIntConst = 107;
	int IntHexConst = 108;
	int LongHexConst = 109;
	int UnsignedHexConst = 110;
	int FloatDoubleConst = 111;
	int DoubleDoubleConst = 112;
	int LongDoubleConst = 113;
	int NTypedefName = 114;
	int NInitDecl = 115;
	int NDeclarator = 116;
	int NStructDeclarator = 117;
	int NDeclaration = 118;
	int NCast = 119;
	int NPointerGroup = 120;
	int NExpressionGroup = 121;
	int NFunctionCallArgs = 122;
	int NNonemptyAbstractDeclarator = 123;
	int NInitializer = 124;
	int NStatementExpr = 125;
	int NEmptyExpression = 126;
	int NParameterTypeList = 127;
	int NFunctionDef = 128;
	int NCompoundStatement = 129;
	int NParameterDeclaration = 130;
	int NCommaExpr = 131;
	int NUnaryExpr = 132;
	int NLabel = 133;
	int NPostfixExpr = 134;
	int NRangeExpr = 135;
	int NStringSeq = 136;
	int NInitializerElementLabel = 137;
	int NLcurlyInitializer = 138;
	int NAsmAttribute = 139;
	int NGnuAsmExpr = 140;
	int NTypeMissing = 141;
	int LITERAL___extension__ = 142;
	int Vocabulary = 143;
	int Whitespace = 144;
	int Comment = 145;
	int CPPComment = 146;
	int Space = 147;
	int LineDirective = 148;
	int BadStringLiteral = 149;
	int Escape = 150;
	int IntSuffix = 151;
	int NumberSuffix = 152;
	int Digit = 153;
	int Exponent = 154;
	int IDMEAT = 155;
	int WideCharLiteral = 156;
	int WideStringLiteral = 157;
}
