stencil wave (
	float grid U(0 .. x_max-1, 0 .. y_max-1, 0 .. z_max-1), 
	/*float grid V(0 .. x_max-1, 0 .. y_max-1, 0 .. z_max-1)[2],*/
	float param fMin,// = -1,
	float param fDX,// = 2/x_max,
	float param fDT_DX_sq// = 0.25/*,
//	float param xxx[0..1,3] = {{1,2},{3,4},{5,6}}*/
)
{
    //iterate while t < 1;
//    iterate while sum((U[x,y,z; t]-U[x,y,z; t-1])^2) > 0.01;
    domainsize = (0 .. x_max-3, 2 .. y_max-3, 2 .. z_max-3);
  
/*  
    initial
    {
    	U[x, y, z; -1] = sinf (2*π * ((x-1) * fDX + fMin)) * sinf (2*π * ((y-1) * fDX + fMin)) * sinf (2*π * ((z-1) * fDX + fMin));
    	U[x, y, z; 0] = U[x, y, z; -1];
    	U[x, y, z; 1] = 0;
    	
    	U[x,y,z;-1 : 10<=x<=20, 5<=y<=10] = 0;
    	U[x,y,z; 0 : x^2+y^2 <= 1000] = 0;
    }
*/    
    operation
    {
    	float c[-1..1] = {
    		2 - 15/2 * fDT_DX_sq,
    		4/3 * fDT_DX_sq,
    		-1/12 * fDT_DX_sq
    	};
    	
    
    	U[x,y,z; t+1] = { i=-2..2, j=-2..2 : i^2+j^2<=4 } sum (c[i/2] * U[x+i,y+j,z; t]);
	
//        float c1 = 2 - 15/2 * fDT_DX_sq;
        
//    	sequence {
//	    	{
		        float c2 = 4/3 * fDT_DX_sq;
		        float c3 = -1/12 * fDT_DX_sq;
				
		        U[x, y, z; t+1] = c[-1] * U[x, y, z; t] - U[x, y, z; t-1] +
		            c[0] * (
		                U[x+1, y, z; t] + U[x-1, y, z; t] +
		                U[x, y+1, z; t] + U[x, y-1, z; t] +
		                U[x, y, z+1; t] + U[x, y, z-1; t]
		            ) +
		            c[1] * (
		                U[x+2, y, z; t] + U[x-2, y, z; t] +
		                U[x, y+2, z; t] + U[x, y-2, z; t] +
		                U[x, y, z+2; t] + U[x, y, z-2; t]
		            );	            
//			}
//			{
//	        	V[x,y,z; t+1; 0] = xxx[0, 0] * U[x,y,z; t];
//		        V[x,y,z; t+1; 1] = U[x,y,z; t+1] - U[x,y,z; t];			
//			}
//		}
    }
    
    boundaries
    {
    	U[x,y,z; t+1 : 0<=x<=1] = 1;
    }
        
	/*
    sequence
    {
	    {
	    	operation
	    	{
	    	}
	    	
	    	boundaries
	    	{
	    	}
	    }
	    {
	    	operation
	    	{
	    	}
	    	
	    	boundaries 
	    	{
	    	}
	    }
    }*/
}
